# logstash/pipeline/logstash.conf

input {
  http_poller {
    urls => {
      spy => {
        method => get
        url => "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=SPY&apikey=${ALPHA_VANTAGE_API_KEY}"
      }
      qqq => {
        method => get
        url => "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=QQQ&apikey=${ALPHA_VANTAGE_API_KEY}"
      }
      iwm => {
        method => get
        url => "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IWM&apikey=${ALPHA_VANTAGE_API_KEY}"
      }
      eem => {
        method => get
        url => "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=EEM&apikey=${ALPHA_VANTAGE_API_KEY}"
      }
      tlt => {
        method => get
        url => "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=TLT&apikey=${ALPHA_VANTAGE_API_KEY}"
      }
    }
    request_timeout => 30
    schedule => { cron => "* * * * *" }  # Ogni minuto
    codec => "json"
  }
}

filter {
  # Trasforma i dati Alpha Vantage in formato standard
  mutate {
    rename => {
      "[Global Quote][01. symbol]" => "symbol"
      "[Global Quote][05. price]" => "price"
      "[Global Quote][08. previous close]" => "previous_close"
      "[Global Quote][09. change]" => "change"
      "[Global Quote][10. change percent]" => "change_percent"
      "[Global Quote][07. latest trading day]" => "timestamp"
    }
    remove_field => ["Global Quote", "@version", "host", "@timestamp"]
  }
  
  # Converte stringhe in numeri
  mutate {
    convert => {
      "price" => "float"
      "previous_close" => "float"
      "change" => "float"
      "change_percent" => "string"
    }
  }
  
  # Aggiunge timestamp corrente per real-time
  ruby {
    code => 'event.set("@timestamp", Time.now.utc.strftime("%Y-%m-%dT%H:%M:%S.%LZ"))'
  }
}

output {
  kafka {
    bootstrap_servers => "${KAFKA_BOOTSTRAP_SERVERS}"
    topic_id => "${KAFKA_TOPIC}"
    codec => json
  }
  
  # Output debug (opzionale per test)
  stdout {
    codec => rubydebug
  }
}